package main

import (
	"fmt"
	"time"
)

//Чем горутины отличаются от потоков?

//Горутина — это легковесный поток выполнения в Go, управляемый рантаймом языка.
//	В отличие от системных потоков, горутины потребляют меньше памяти (стек начинается с ~2 КБ) и
//переключаются быстрее, так как работают в пространстве пользователя.
//Пример:

func main() {
	go func() {
		fmt.Println("Горутина работает!")
	}()
	time.Sleep(time.Millisecond) // Даём время на выполнение
}

//Ключевые особенности:
//
//Запускаются через go func()
//Работают конкурентно (не обязательно параллельно)
//Общаются через каналы (channels)
//Дешевле потоков ОС
//Могут выполняться в одном системном потоке (M:N модель)

//Процесс — это экземпляр программы со своим адресным пространством, ресурсами (память, файлы) и
//минимум одним потоком. Поток (нить) — часть процесса, выполняющая код, разделяющая память и
//ресурсы с другими потоками этого процесса.
//
//Ключевые различия:
//
//Процессы изолированы, потоки разделяют память.
//Создание процесса дороже, чем потока.
//Потоки легче взаимодействуют, но уязвимы к race condition.
//Пример на Go:

// Процесс (отдельная программа)
//go func() {
//	cmd := exec.Command("sleep", "5")
//	cmd.Run() // Запуск нового процесса
//}()
//
//// Поток (горутина)
//go func() {
//	time.Sleep(5 * time.Second) // Легковесный поток
//}()
//Горутины — ещё легче потоков, управляются рантаймом Go.
